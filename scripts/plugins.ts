import fs from 'node:fs'
import path from 'node:path'

export interface ImportedPlugin {
  name: string
  path: string
}

export function getPlugins(): ImportedPlugin[] {
  const pluginsDir = path.resolve(__dirname, '../src/plugins')
  const files = fs
    .readdirSync(pluginsDir)
    .filter(fn => fn.endsWith('.ts') && !fn.endsWith('.d.ts'))
  files.sort((a, b) => a.localeCompare(b, undefined, { sensitivity: 'base' }))
  const plugins: ImportedPlugin[] = []
  for (const file of files) {
    const name = path.basename(file, '.ts')
    plugins.push({
      name: `_${name.replace(/\./g, '_').replace(/-/g, '_')}`,
      path: `./plugins/${name}`,
    })
  }
  return plugins
}

const typedPluginsOut = path.resolve(__dirname, '../src/preset-plugins.ts')

const imports: string[] = []
const entries: string[] = []

getPlugins().forEach((provider) => {
  const importPath = provider.path
  const varName = provider.name.replace(/[-\s]/g, '_')
  imports.push(`import ${varName} from '${importPath}'`)
  entries.push(`  ${varName},`)
})

const content = `/* eslint-disable */
/* prettier-ignore */
// @ts-nocheck
// Generated by script. ‼️ DO NOT MODIFY THIS FILE ‼️
${imports.join('\n')}

export const presetPlugins = [
${entries.join('\n')}
]
`

fs.writeFileSync(typedPluginsOut, content, 'utf8')
