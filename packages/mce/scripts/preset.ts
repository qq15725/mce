import fs from 'node:fs'
import path from 'node:path'

export interface ImportedFile {
  type: 'mixin' | 'plugin'
  name: string
  path: string
}

function readdirSync(root: string): string[] {
  return fs.readdirSync(root).flatMap((filename) => {
    if (filename.endsWith('.ts')) {
      return [filename]
    }
    else {
      return fs.readdirSync(path.resolve(root, filename)).map(v => `${filename}/${v}`)
    }
  })
}

export function getFiles(): ImportedFile[] {
  const mixins = readdirSync(path.resolve(__dirname, '../src/mixins'))
  const plugins = readdirSync(path.resolve(__dirname, '../src/plugins'))
  mixins.sort((a, b) => a.localeCompare(b, undefined, { sensitivity: 'base' }))
  plugins.sort((a, b) => a.localeCompare(b, undefined, { sensitivity: 'base' }))
  const files: ImportedFile[] = []
  for (const mixin of mixins) {
    const name = mixin.replace('.ts', '')
    files.push({
      type: 'mixin',
      name: `_${name.replace(/\./g, '_').replace(/[-/]/g, '_')}`,
      path: `./mixins/${name}`,
    })
  }
  for (const plugin of plugins) {
    const name = plugin.replace('.ts', '')
    files.push({
      type: 'plugin',
      name: `_${name.replace(/\./g, '_').replace(/[-/]/g, '_')}`,
      path: `./plugins/${name}`,
    })
  }
  return files
}

const dts = [
  { name: 'mixins', type: 'mixin' },
  { name: 'plugins', type: 'plugin' },
]
dts.forEach((item) => {
  const typedPluginsOut = path.resolve(__dirname, `../src/${item.name}.ts`)
  const imports: string[] = []
  const entries: string[] = []
  getFiles().forEach((file) => {
    if (file.type === item.type) {
      const importPath = file.path
      const varName = file.name.replace(/[-\s]/g, '_')
      imports.push(`import ${varName} from '${importPath}'`)
      entries.push(`  ${varName},`)
    }
  })
  const content = `/* eslint-disable */
/* prettier-ignore */
// @ts-nocheck
// Generated by script. ‼️ DO NOT MODIFY THIS FILE ‼️
${imports.join('\n')}

export const ${item.name} = [
${entries.join('\n')}
]
`
  fs.writeFileSync(typedPluginsOut, content, 'utf8')
})
